define(["exports", "../../../../lit/index.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-lite.js", "../../../simple-colors/simple-colors.js", "../../../../wired-elements/lib/wired-button.js"], function (_exports, _index, _simpleIcons, _simpleIconLite, _simpleColors, _wiredButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxSiteButton = void 0;

  var _templateObject_d7661430c0ce11ecbdb54bb05e9423ad, _templateObject2_d7661430c0ce11ecbdb54bb05e9423ad;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // EXPORT (so make available to other documents that reference this file) a class, that extends LitElement
  // which has the magic life-cycles and developer experience below added
  var AppHaxSiteButton = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(AppHaxSiteButton, _SimpleColors);

    var _super = _createSuper(AppHaxSiteButton);

    // HTMLElement life-cycle, built in; use this for setting defaults
    function AppHaxSiteButton() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxSiteButton);
      _this = _super.call(this);
      _this.label = null;
      _this.value = null;
      _this.disabled = false;
      _this.elevation = '3';
      _this.active = false;

      _this.addEventListener('click', _this._handleClick);

      _this.addEventListener('focus', _this._handleFocus);

      _this.addEventListener('blur', _this._handleBlur);

      _this.addEventListener('mouseover', _this._handleFocus);

      _this.addEventListener('mouseout', _this._handleBlur);

      return _this;
    } // properties that you wish to use as data in HTML, CSS, and the updated life-cycle


    babelHelpers.createClass(AppHaxSiteButton, [{
      key: "_handleFocus",
      value: function _handleFocus() {
        this.active = true;
        this.elevation = '5';
      }
    }, {
      key: "_handleBlur",
      value: function _handleBlur() {
        this.active = false;
        this.elevation = '3';
      }
    }, {
      key: "_handleClick",
      value: function _handleClick() {
        if (!this.disabled) {
          this.shadowRoot.querySelector('.haxButton').blur();
        }
      } // HTML - specific to Lit

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_d7661430c0ce11ecbdb54bb05e9423ad || (_templateObject_d7661430c0ce11ecbdb54bb05e9423ad = babelHelpers.taggedTemplateLiteral(["\n      <wired-button\n        elevation=", "\n        ?disabled=", "\n        class=\"haxButton\"\n        @click=\"", "\"\n        ><span class=\"label\">", "</span></wired-button\n      >\n    "])), this.elevation, this.disabled, this._handleClick, this.label);
      } // HAX specific callback
      // This teaches HAX how to edit and work with your web component

      /**
       * haxProperties integration via file reference
       */

    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return 'app-hax-site-button';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          label: {
            type: String
          },
          value: {
            type: String
          },
          disabled: {
            type: Boolean,
            reflect: true
          },
          elevation: {
            type: Number
          },
          active: {
            type: Boolean,
            reflect: true
          }
        };
      } // CSS - specific to Lit

    }, {
      key: "styles",
      get: function get() {
        return (0, _index.css)(_templateObject2_d7661430c0ce11ecbdb54bb05e9423ad || (_templateObject2_d7661430c0ce11ecbdb54bb05e9423ad = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        --background-color: transparent;\n        --background-color-active: white;\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        font-family: 'Press Start 2P', sans-serif;\n        width: fit-content;\n        margin: 20px 0;\n      }\n      @media (max-width: 800px) {\n        :host {\n          width: 320px;\n        }\n      }\n      :host([active]) .haxButton {\n        color: var(--app-hax-background-color, var(--background-color-active));\n        background-color: var(--app-hax-accent-color, var(--accent-color));\n      }\n      .haxButton {\n        background-color: var(\n          --app-hax-background-color,\n          var(--background-color)\n        );\n        color: var(--app-hax-accent-color, var(--accent-color));\n        font-size: var(--app-hax-site-button-font-size, 26px);\n      }\n\n      .label {\n        width: var(--app-hax-site-button-width, auto);\n        min-width: var(--app-hax-site-button-min-width, auto);\n        height: var(--app-hax-site-button-height, auto);\n        display: inline-flex;\n      }\n    "])));
      }
    }]);
    return AppHaxSiteButton;
  }(_simpleColors.SimpleColors);

  _exports.AppHaxSiteButton = AppHaxSiteButton;
  customElements.define(AppHaxSiteButton.tag, AppHaxSiteButton);
});