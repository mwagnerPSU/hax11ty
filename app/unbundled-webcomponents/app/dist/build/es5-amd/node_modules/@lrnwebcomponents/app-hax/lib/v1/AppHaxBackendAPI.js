define(["exports", "../../../../lit/index.js", "../../../jwt-login/jwt-login.js", "../../../../mobx/dist/mobx.esm.js", "./AppHaxStore.js"], function (_exports, _index, _jwtLogin, _mobxEsm, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxBackendAPI = _exports.AppHaxAPI = void 0;

  var _templateObject_d74b1220c0ce11ecbdb54bb05e9423ad;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // this element will manage all connectivity to the backend
  // this way everything is forced to request through calls to this
  // so that it doesn't get messy down below in state
  var AppHaxBackendAPI = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(AppHaxBackendAPI, _LitElement);

    var _super = _createSuper(AppHaxBackendAPI);

    function AppHaxBackendAPI() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxBackendAPI);
      _this = _super.call(this);
      _this.jwt = null;
      _this.method = window.appSettings.demo ? 'GET' : 'POST';
      _this.baseAddress = '/';
      _this.lastResponse = {};
      _this.appSettings = {};
      (0, _mobxEsm.autorun)(function () {
        _this.appSettings = (0, _mobxEsm.toJS)(_AppHaxStore.store.appSettings);
      });
      return _this;
    }

    babelHelpers.createClass(AppHaxBackendAPI, [{
      key: "render",
      value: function render() {
        // eslint-disable-next-line no-unused-expressions
        (0, _index.html)(_templateObject_d74b1220c0ce11ecbdb54bb05e9423ad || (_templateObject_d74b1220c0ce11ecbdb54bb05e9423ad = babelHelpers.taggedTemplateLiteral(["\n      <jwt-login\n      auto\n      id=\"jwt\"\n      jwt=\"", "\"\n      @jwt-changed=\"", "\"\n      url=\"", "\"\n      refresh-url=\"", "\"\n      redirect-url=\"", "\"\n      logout-url=\"", "\"\n    ></jwt-login>"])), this.jwt, this.jwtChanged, this.appSettings.login, this.appSettings.refreshUrl, this.appSettings.redirectUrl, this.appSettings.logoutUrl);
      } // event meaning we either got or removed the jwt

    }, {
      key: "jwtChanged",
      value: function jwtChanged(e) {
        this.jwt = e.detail.value;
      }
    }, {
      key: "makeCall",
      value: function () {
        var _makeCall = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(call) {
          var data,
              save,
              urlRequest,
              options,
              response,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  data = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
                  save = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;

                  if (!(this.appSettings && this.appSettings[call])) {
                    _context.next = 11;
                    break;
                  }

                  urlRequest = "".concat(this.baseAddress).concat(this.appSettings[call]);
                  options = {
                    method: this.method
                  }; // encode in search params or body of the request

                  if (this.method === 'GET') {
                    urlRequest += '?' + new URLSearchParams(data).toString();
                  } else {
                    options.body = JSON.stringify(data);
                  }

                  _context.next = 8;
                  return fetch("".concat(urlRequest), options).then(function (response) {
                    if (response.ok) {
                      return response.json();
                    }

                    return {};
                  });

                case 8:
                  response = _context.sent;

                  // ability to save the output if this is being done as a bg task
                  // that way we can get access to the result later on
                  if (save) {
                    this.lastResponse[call] = response;
                  }

                  return _context.abrupt("return", response);

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function makeCall(_x) {
          return _makeCall.apply(this, arguments);
        }

        return makeCall;
      }() // set instance of API in store

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "firstUpdated", this).call(this, changedProperties);
        } // set store refernece to this singleton


        _AppHaxStore.store.AppHaxAPI = this;
        _AppHaxStore.store.newSitePromiseList = [function () {
          return _this2.makeCall('createSite', _AppHaxStore.store.site, true);
        }].concat(babelHelpers.toConsumableArray(_AppHaxStore.store.newSitePromiseList));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxBackendAPI.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === 'jwt') {
            _AppHaxStore.store.jwt = _this3[propName];
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return 'app-hax-backend-api';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          jwt: {
            type: String
          },
          baseAddress: {
            type: String,
            attribute: 'base-address'
          },
          appSettings: {
            type: Object
          },
          method: {
            type: String
          }
        };
      }
    }]);
    return AppHaxBackendAPI;
  }(_index.LitElement);

  _exports.AppHaxBackendAPI = AppHaxBackendAPI;
  window.AppHaxAPI = window.AppHaxAPI || {};

  window.AppHaxAPI.requestAvailability = function () {
    if (!window.AppHaxAPI.instance) {
      window.AppHaxAPI.instance = document.createElement(AppHaxBackendAPI.tag);
      document.body.appendChild(window.AppHaxAPI.instance);
    }

    return window.AppHaxAPI.instance;
  };

  var AppHaxAPI = window.AppHaxAPI.requestAvailability();
  _exports.AppHaxAPI = AppHaxAPI;
  customElements.define(AppHaxBackendAPI.tag, AppHaxBackendAPI);
});