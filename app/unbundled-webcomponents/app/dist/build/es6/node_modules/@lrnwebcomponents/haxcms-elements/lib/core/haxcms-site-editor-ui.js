import{LitElement as t,html as e,css as i,unsafeCSS as o}from"../../../../lit/index.js";import{store as s}from"./haxcms-site-store.js";import{HAXStore as a}from"../../../hax-body/lib/hax-store.js";import{autorun as n,toJS as d}from"../../../../mobx/dist/mobx.esm.js";import{localStorageSet as l}from"../../../utils/utils.js";import"../../../simple-icon/simple-icon.js";import"../../../simple-icon/lib/simple-icons.js";import"../../../simple-icon/lib/simple-icon-button.js";import{HAXCMSThemeParts as c}from"./utils/HAXCMSThemeParts.js";import{HAXCMSI18NMixin as p}from"./utils/HAXCMSI18NMixin.js";import"./micros/haxcms-button-add.js";import"../../../rpg-character/rpg-character.js";import"../../../app-hax/lib/v1/app-hax-top-bar.js";import"./haxcms-darkmode-toggle.js";import"../../../../wired-elements/lib/wired-button.js";const r=new URL("../../../app-hax/lib/assets/images/HAXLogo.svg",import.meta.url).href,h=new URL("../../../app-hax/lib/assets/images/ButtonBGLM.svg",import.meta.url).href,u=new URL("../../../app-hax/lib/assets/images/ButtonBGDM.svg",import.meta.url).href,m=new URL("../../../app-hax/lib/assets/images/Logout.svg",import.meta.url).href;class HAXCMSSiteEditorUI extends(c(p(t))){static get styles(){return[...super.styles,i`
        :host *:not(:defined) {
          display: none;
        }
        :host {
          display: flex;
          position: fixed;
          left: 0;
          top: 0;
          right: 0;
          background-color: var(--haxcms-system-bg, #37474f);
          z-index: 10000;
          visibility: visible;
        }
        :host([edit-mode]) {
          z-index: 9999;
        }
        :host([dashboard-opened]) {
          left: 50vw;
        }
        /**
         * Dashboard open trumps all contextual settings
         */
        :host([dashboard-opened]) #editbutton,
        :host([dashboard-opened]) #editdetails,
        :host([dashboard-opened]) #deletebutton,
        :host([dashboard-opened]) #addbutton,
        :host([dashboard-opened]) #addbuttonchild,
        :host([dashboard-opened]) #duplicatebutton {
          display: none !important;
        }
        :host([edit-mode]) #editdetails {
          margin-left: 64px;
        }
        :host *[hidden] {
          display: none;
        }
        simple-tooltip:not(:defined) {
          display: none !important;
        }
        :host([painting]) {
          opacity: 0;
          visibility: hidden;
        }
        simple-icon-button {
          vertical-align: text-bottom;
          display: inline-flex;
          --simple-icon-width: 24px;
          --simple-icon-height: 24px;
          border-radius: 50%;
          border: none;
          background-color: black;
          color: white;
          text-align: center;
          line-height: 40px;
          min-width: unset;
          padding: 0;
          margin: 4px 2px;
          width: 40px;
          height: 40px;
          transition: 0.2s all ease-in-out;
          position: relative;
          box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),
            0 3px 14px 2px rgba(0, 0, 0, 0.12),
            0 5px 5px -3px rgba(0, 0, 0, 0.4);
        }
        haxcms-button-add {
          display: inline-flex;
          margin: 4px 2px;
          vertical-align: text-bottom;
        }
        .topbar-button:hover,
        .topbar-button:focus,
        .topbar-button:active {
          opacity: .8;
        }
        .topbar-button {
          background-image: url('${o(h)}');
          background-color: var(--simple-colors-default-theme-accent-5, blue);
        }
        :host([dark-mode]) .topbar-button {
          background-image: url('${o(u)}');
        }
        #cancelbutton {
          background-color: var(--haxcms-system-danger-color);
        }
        #editbutton {
          visibility: hidden;
          opacity: 0;
        }
        :host([page-allowed]) #editbutton,
        :host([page-allowed]) #editdetails,
        :host([page-allowed]) #deletebutton {
          visibility: visible;
          opacity: 1;
        }

        :host(:hover),
        :host(:active),
        :host(:focus) {
          opacity: 1;
        }
        simple-tooltip {
          --simple-tooltip-background: #000000;
          --simple-tooltip-opacity: 1;
          --simple-tooltip-text-color: #ffffff;
          --simple-tooltip-delay-in: 0;
          --simple-tooltip-duration-in: 200ms;
          --simple-tooltip-duration-out: 0;
          --simple-tooltip-border-radius: 0;
          --simple-tooltip-font-size: 14px;
        }
        app-hax-top-bar {
          top: 0;
          z-index: 1000;
          right: 0;
          left: 0;
          position: fixed;
        }
        app-hax-top-bar::part(top-bar) {
          grid-template-columns: 20% 60% 20%;
        }
        .haxLogo {
          --simple-icon-height: 40px;
          --simple-icon-width: 40px;
          margin: 4px;
        }

        .space-hack {
          display: inline-flex;
          width: 64px;
          height: 48px;
        }
        .soundToggle {
          position: relative;
          display: inline-flex;
          vertical-align: top;
        }

        .soundToggle img {
          width: 24px;
          height: 24px;
        }

        app-hax-search-bar {
          vertical-align: middle;
          display: inline-flex;
        }
        .user-menu {
          display:none;
        }
        .user-menu.open {
          display: block;
          top: 49px;
          right: 0px;
          position: absolute;
          border: 3px solid black;
          background-color: white;
        }
        .user-menu.open button {
          display: block;
          width: 100%;
          margin: 0;
          padding: 8px;
          font-size: 20px;
          font-family: 'Press Start 2P', sans-serif;
          color: black;
          background-color: white;
        }
        .user-menu.open button:hover,
        .user-menu.open button:active,
        .user-menu.open button:focus {
          background-color: black;
          color: white;
        }
        .user-menu .ops-panel {
          justify-content: space-around;
          display: flex;
          padding: 8px 16px;
        }

        :host([dark-mode]) .user-menu.open {
          background-color: black;
          color: white;
          border: 3px solid white;
        }
        :host([dark-mode]) .user-menu.open button {
          background-color: black;
          color: white;
        }

        :host([dark-mode]) .user-menu.open button:hover,
        :host([dark-mode]) .user-menu.open button:active,
        :host([dark-mode]) .user-menu.open button:focus {
          background-color: white;
          color: black;
        }

        .topbar-character {
          cursor: pointer;
          display: inline-block;
          margin: -4px -8px 0 2px;
        }
        .user-menu.open > .logout {
          background-image: url('${o(m)}');
          background-repeat: no-repeat;
          background-position: center;
          text-align: center;
        }

        @media screen and (max-width: 800px) {
          :host([dashboard-opened]) {
            left: 90vw;
          }
          :host([edit-mode]) {
            bottom: unset;
          }
        }
      `]}static get tag(){return"haxcms-site-editor-ui"}constructor(){super(),this.rpgHat="none",this.darkMode=!1,this.userMenuOpen=!1,this.soundIcon="",this.__disposer=this.__disposer||[],this.t=this.t||{},this.t={...this.t,backToSiteList:"Back to site list",cancelEditing:"Cancel editing",editDetails:"Edit details",addPage:"Add page",deletePage:"Delete page",editSiteOutline:"Edit site outline",closeSiteSettings:"Close site settings",editSiteSettings:"Edit site settings",savePageContent:"Save page content",editPageContent:"Edit page content",startNewJourney:"Start New Journey",accountInfo:"Account Info",logOut:"Log out"},this.backText="Back to site list",this.painting=!0,this.pageAllowed=!1,this.editMode=!1,this.__editIcon="hax:page-edit",this.icon="hax:site-settings",this.manifestEditMode=!1,n((()=>{this.darkMode=d(s.darkMode),d(s.darkMode)?a.globalPreferences.haxUiTheme="haxdark":a.globalPreferences.haxUiTheme="hax"})),n((()=>{this.soundIcon=d(s.soundStatus)?new URL("../../../app-hax/lib/assets/images/FullVolume.svg",import.meta.url).href:new URL("../../../app-hax/lib/assets/images/Silence.svg",import.meta.url).href})),setTimeout((()=>{import("./haxcms-outline-editor-dialog.js"),import("./haxcms-site-dashboard.js"),import("../../../simple-modal/simple-modal.js"),import("../../../simple-fields/lib/simple-fields-form.js")}),0)}soundToggle(){const t=!d(s.soundStatus);s.soundStatus=t,l("app-hax-soundStatus",t),t?(s.toast("Can you hear me now? Good.",2e3,{hat:"random"}),s.playSound("click")):s.toast("Sound off.. hey.. HELLO!?!",2e3,{fire:!0})}toggleMenu(){this.userMenuOpen=!this.userMenuOpen}render(){return e`
      <app-hax-top-bar>
        <span slot="left">
          <simple-icon-lite src="${r}" class="haxLogo" @click="${this.redirectToSites}"></simple-icon-lite>
          <slot name="haxcms-site-editor-ui-prefix-avatar"></slot>
        </span>
      <span slot="center">
        <slot name="haxcms-site-editor-ui-prefix-buttons"></slot>
        <simple-icon-button
          hidden
          ?dark="${!this.darkMode}"
          id="editbutton"
          icon="${this.__editIcon}"
          @click="${this._editButtonTap}"
          label="${this.__editText}"
          voice-command="edit (this) page"
          class="topbar-button"
          accent-color="green"
        ></simple-icon-button>
        <simple-icon-button
          id="cancelbutton"
          ?dark="${!this.darkMode}"
          icon="icons:cancel"
          @click="${this._cancelButtonTap}"
          .hidden="${!this.editMode}"
          label="${this.t.cancelEditing}"
          voice-command="cancel (editing)"
          class="topbar-button"
          accent-color="red"
        ></simple-icon-button>
        <simple-icon-button
          ?dark="${!this.darkMode}"
          id="editdetails"
          icon="hax:page-details"
          @click="${this._editDetailsButtonTap}"
          label="${this.t.editDetails}"
          voice-command="edit (page) details"
          class="topbar-button"
          accent-color="blue"
          part="${this.editMode?"edit-mode-active":""}"
          tabindex="${this.editMode?"-1":""}"
        ></simple-icon-button>
        <simple-icon-button
          part="${this.editMode?"edit-mode-active":""}"
          tabindex="${this.editMode?"-1":""}"
          ?dark="${!this.darkMode}"
          id="deletebutton"
          icon="icons:delete"
          @click="${this._deleteButtonTap}"
          label="${this.t.deletePage}"
          voice-command="delete page"
          class="topbar-button"
          accent-color="red"
        ></simple-icon-button>
        <haxcms-button-add
        hidden
        ?dark-mode="${this.darkMode}"
        accent-color="purple"
        id="addbutton"></haxcms-button-add>
        <haxcms-button-add
          hidden
          ?dark-mode="${this.darkMode}"
          id="addbuttonchild"
          type="child"
          accent-color="purple"
        ></haxcms-button-add>
        <haxcms-button-add
          hidden
          ?dark-mode="${this.darkMode}"
          type="duplicate"
          id="duplicatebutton"
          accent-color="purple"
        ></haxcms-button-add>
        <simple-tooltip for="username" position="bottom" offset="14"
          >${this.backText}</simple-tooltip
        >
        <simple-tooltip for="cancelbutton" position="bottom" offset="14"
          >${this.t.cancelEditing}</simple-tooltip
        >
        <simple-tooltip for="editbutton" position="bottom" offset="14"
          >${this.__editText}</simple-tooltip
        >
        <simple-tooltip for="editdetails" position="bottom" offset="14"
          >${this.t.editDetails}</simple-tooltip
        >
        <simple-tooltip for="deletebutton" position="bottom" offset="14"
          >${this.t.deletePage}</simple-tooltip
        >
        <slot name="haxcms-site-editor-ui-suffix-buttons"></slot>
      </span>
      <span slot="right">
        <rpg-character
          class="topbar-character"
          seed="${this.userName}"
          width="68"
          height="68"
          aria-label="System menu"
          title="System menu"
          hat="${this.rpgHat}"
          @click="${this.toggleMenu}"
        ></rpg-character>
        <div class="user-menu ${this.userMenuOpen?"open":""}">
          <div class="ops-panel">
            <wired-button
              elevation="1"
              class="soundToggle"
              @click="${this.soundToggle}"
            >
              <simple-icon-lite src="${this.soundIcon}" loading="lazy" decoding="async"></simple-icon-lite>
            </wired-button>
            <haxcms-darkmode-toggle></haxcms-darkmode-toggle>
          </div>
          <button @click="${this._manifestButtonTap}">
            <simple-icon-lite icon="${this.icon}"></simple-icon-lite>${this.__settingsText}</button>
          <button
          id="outlinebutton"
          @click="${this._outlineButtonTap}"
          ><simple-icon-lite icon="hax:site-map"></simple-icon-lite>${this.t.editSiteOutline}</button>
          <button>
          <simple-icon-lite icon="add"></simple-icon-lite>${this.t.startNewJourney}</button>
          <button>
          <simple-icon-lite icon="face"></simple-icon-lite>${this.t.accountInfo}</button>
          <button class="logout">${this.t.logOut}</button>
        </div>
      </span>
    </app-hax-top-bar>
    `}redirectToSites(){let t="";if(window.appSettings&&window.appSettings.backLink)t=window.appSettings.backLink;else{let e=/^http/,i=document.createElement("a");i.href=window.location.href,t=e.test(i.href)?`http://${i.host}`:`https://${i.host}`}window.location.replace(t)}updateAvailableButtons(){this.shadowRoot&&setTimeout((()=>{window.appSettings&&window.appSettings.backText&&(this.backText=window.appSettings.backText);[{varPath:"getNodeFieldsPath",selector:"#editdetails"},{varPath:"deleteNodePath",selector:"#deletebutton"},{varPath:"saveNodePath",selector:"#editbutton"},{varPath:"createNodePath",selector:"#addbutton"},{varPath:"createNodePath",selector:"#addbuttonchild"},{varPath:"createNodePath",selector:"#duplicatebutton"}].forEach((t=>{window.appSettings&&window.appSettings[t.varPath]&&null!=window.appSettings[t.varPath]&&""!=window.appSettings[t.varPath]&&"null"!=window.appSettings[t.varPath]&&(t.dep?null!=window.appSettings[t.dep]&&""!=window.appSettings[t.dep]&&"null"!=window.appSettings[t.dep]&&this.shadowRoot.querySelector(t.selector).removeAttribute("hidden"):this.shadowRoot.querySelector(t.selector).removeAttribute("hidden"))}))}),100)}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.updateAvailableButtons(),this.dispatchEvent(new CustomEvent("haxcms-load-user-data",{bubbles:!0,composed:!0,cancelable:!1,detail:!0})),this.shadowRoot.querySelectorAll("[voice-command]").forEach((t=>{"editbutton"==t.getAttribute("id")&&this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: save (this) page",context:t,callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: "+t.getAttribute("voice-command"),context:t,callback:"click"}}))}))}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"userMenuOpen"===e&&void 0!==t&&(this.userMenuOpen?this.rpgHat="construction":this.rpgHat="none"),"editMode"==e&&(this.editMode?this.rpgHat="edit":this.rpgHat="none",this._editModeChanged(this[e],t),this.dispatchEvent(new CustomEvent("edit-mode-changed",{detail:this[e]}))),"manifestEditMode"==e&&(this._manifestEditModeChanged(this[e],t),this.dispatchEvent(new CustomEvent("manifest-edit-mode-changed",{detail:this[e]}))),"dashboardOpened"!=e&&"t"!=e||this._dashboardOpenedChanged(this.dashboardOpened),"t"===e&&(this.editMode?this.__editText=this.t.savePageContent:this.__editText=this.t.editPageContent)}))}static get properties(){return{...super.properties,userName:{type:String,attribute:"user-name"},rpgHat:{type:String},userPicture:{type:String,attribute:"user-picture"},userMenuOpen:{type:Boolean},soundIcon:{type:String},darkMode:{type:Boolean,reflect:!0,attribute:"dark-mode"},backLink:{type:String},backText:{type:String},__editIcon:{type:String},__editText:{type:String},__settingsText:{type:String},painting:{type:Boolean,reflect:!0},pageAllowed:{type:Boolean,attribute:"page-allowed",reflect:!0},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},manifestEditMode:{type:Boolean,attribute:"manifest-edit-mode",reflect:!0},activeTitle:{type:String,attribute:"active-title"},manifest:{type:Object},icon:{type:String},dashboardOpened:{type:Boolean,reflect:!0,attribute:"dashboard-opened"}}}connectedCallback(){super.connectedCallback(),n((t=>{s.userData&&(this.userName=d(s.userData.userName),this.userPicture=d(s.userData.userPicture),this.updateAvailableButtons()),this.__disposer.push(t)})),n((t=>{this.editMode=d(s.editMode),this.__disposer.push(t)})),n((t=>{this.manifest=d(s.manifest),this.icon="hax:site-settings",this.__disposer.push(t)})),n((t=>{this.dashboardOpened=d(s.dashboardOpened),this.__disposer.push(t)})),n((t=>{const e=d(s.activeItem);this.updateAvailableButtons(),e&&e.id?(this.activeTitle=e.title,this.pageAllowed=!0):this.pageAllowed=!1,this.__disposer.push(t)}))}disconnectedCallback(){for(var t in this.__disposer)this.__disposer[t].dispose();super.disconnectedCallback()}_dashboardOpenedChanged(t){t?(this.__settingsText=this.t.closeSiteSettings,this.icon="icons:cancel"):t||(this.__settingsText=this.t.editSiteSettings,this.icon="hax:site-settings")}_editButtonTap(t){s.playSound("click"),this.editMode=!this.editMode,this.editMode||this.dispatchEvent(new CustomEvent("haxcms-save-node",{bubbles:!0,composed:!0,cancelable:!1,detail:s.activeItem})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}_editDetailsButtonTap(t){s.playSound("click");const e=new CustomEvent("haxcms-load-node-fields",{bubbles:!0,composed:!0,cancelable:!1,detail:t.target});window.dispatchEvent(e)}_cancelButtonTap(t){this.editMode=!1,s.playSound("error"),this.dispatchEvent(new CustomEvent("hax-cancel",{bubbles:!0,composed:!0,cancelable:!1,detail:t.detail})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}_createNewItem(t){const e=new CustomEvent("haxcms-create-node",{bubbles:!0,composed:!0,cancelable:!1,detail:{values:this.__newForm.value}});this.dispatchEvent(e)}_updateItem(t){var e,i=t.target;e=i.__form?i.__form.value:i.parentNode.__form.value,window.dispatchEvent(new CustomEvent("haxcms-save-node-details",{bubbles:!0,composed:!0,cancelable:!0,detail:e})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,composed:!0,cancelable:!0,detail:{}}))}_deleteButtonTap(t){s.playSound("click");let e=document.createElement("span");e.innerHTML=`"${s.activeItem.title}" will be removed from the outline but its content stays on the file system.`;let i=document.createElement("button"),o=document.createElement("simple-icon");o.icon="icons:delete",i.appendChild(o),i.appendChild(document.createTextNode("Confirm")),i.style.color="white",i.style.backgroundColor="#ee0000",i.addEventListener("click",this._deleteActive.bind(this));let a=document.createElement("button"),n=document.createElement("simple-icon");n.icon="icons:cancel",a.appendChild(n),a.appendChild(document.createTextNode("cancel")),a.addEventListener("click",(()=>s.playSound("error"))),a.setAttribute("dialog-dismiss","dialog-dismiss");let d=document.createElement("span");d.appendChild(i),d.appendChild(a);const l=new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!1,detail:{title:"Are you sure you want to delete this page?",styles:{"--simple-modal-z-index":"100000000","--simple-modal-min-width":"30vw","--simple-modal-min-height":"30vh"},elements:{content:e,buttons:d},invokedBy:this.shadowRoot.querySelector("#deletebutton"),clone:!1,modal:!0}});window.dispatchEvent(l)}_deleteActive(t){s.playSound("click");const e=new CustomEvent("haxcms-delete-node",{bubbles:!0,composed:!0,cancelable:!1,detail:{item:s.activeItem}});this.dispatchEvent(e)}_outlineButtonTap(t){s.playSound("click");const e=new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!1,detail:{title:this.t.editSiteOutline,styles:{"--simple-modal-width":"70vw","--simple-modal-max-width":"70vw","--simple-modal-z-index":"100000000","--simple-modal-height":"70vh","--simple-modal-max-height":"70vh"},elements:{content:document.createElement("haxcms-outline-editor-dialog")},invokedBy:this.shadowRoot.querySelector("#outlinebutton"),clone:!1,modal:!0}});window.dispatchEvent(e)}_manifestButtonTap(t){s.playSound("click"),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}})),window.dispatchEvent(new CustomEvent("haxcms-load-site-dashboard",{bubbles:!0,composed:!0,cancelable:!1,detail:t.target}))}_editModeChanged(t,e){t?(this.__editIcon="icons:save",this.__editText=this.t.savePageContent):(this.__editIcon="hax:page-edit",this.__editText=this.t.editPageContent),void 0!==e&&(s.editMode=t,a.haxTray.collapsed=!t)}_outlineEditModeChanged(t,e){this.dispatchEvent(new CustomEvent("haxcms-outline-edit-mode-changed",{bubbles:!0,composed:!0,cancelable:!1,detail:t}))}_manifestEditModeChanged(t,e){this.dispatchEvent(new CustomEvent("haxcms-manifest-edit-mode-changed",{bubbles:!0,composed:!0,cancelable:!1,detail:t}))}}window.customElements.define(HAXCMSSiteEditorUI.tag,HAXCMSSiteEditorUI);export{HAXCMSSiteEditorUI};