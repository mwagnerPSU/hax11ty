import{LitElement as t,html as e}from"../../../../lit/index.js";import"../../../jwt-login/jwt-login.js";import{toJS as i,autorun as s}from"../../../../mobx/dist/mobx.esm.js";import{store as a}from"./AppHaxStore.js";export class AppHaxBackendAPI extends t{static get tag(){return"app-hax-backend-api"}constructor(){super(),this.jwt=null,this.method=window.appSettings.demo?"GET":"POST",this.baseAddress="/",this.lastResponse={},this.appSettings={},s((()=>{this.appSettings=i(a.appSettings)}))}static get properties(){return{jwt:{type:String},baseAddress:{type:String,attribute:"base-address"},appSettings:{type:Object},method:{type:String}}}render(){e`
      <jwt-login
      auto
      id="jwt"
      jwt="${this.jwt}"
      @jwt-changed="${this.jwtChanged}"
      url="${this.appSettings.login}"
      refresh-url="${this.appSettings.refreshUrl}"
      redirect-url="${this.appSettings.redirectUrl}"
      logout-url="${this.appSettings.logoutUrl}"
    ></jwt-login>`}jwtChanged(t){this.jwt=t.detail.value}async makeCall(t,e={},i=!1){if(this.appSettings&&this.appSettings[t]){var s=`${this.baseAddress}${this.appSettings[t]}`,a={method:this.method};"GET"===this.method?s+="?"+new URLSearchParams(e).toString():a.body=JSON.stringify(e);const p=await fetch(`${s}`,a).then((t=>t.ok?t.json():{}));return i&&(this.lastResponse[t]=p),p}}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),a.AppHaxAPI=this,a.newSitePromiseList=[()=>this.makeCall("createSite",a.site,!0),...a.newSitePromiseList]}updated(t){super.updated&&super.updated(t),t.forEach(((t,e)=>{"jwt"===e&&(a.jwt=this[e])}))}}window.AppHaxAPI=window.AppHaxAPI||{},window.AppHaxAPI.requestAvailability=()=>(window.AppHaxAPI.instance||(window.AppHaxAPI.instance=document.createElement(AppHaxBackendAPI.tag),document.body.appendChild(window.AppHaxAPI.instance)),window.AppHaxAPI.instance);export const AppHaxAPI=window.AppHaxAPI.requestAvailability();customElements.define(AppHaxBackendAPI.tag,AppHaxBackendAPI);