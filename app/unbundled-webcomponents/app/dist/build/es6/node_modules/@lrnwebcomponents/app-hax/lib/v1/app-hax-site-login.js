import{html as e,css as t}from"../../../../lit/index.js";import"../../../simple-icon/lib/simple-icons.js";import"../../../simple-icon/lib/simple-icon-lite.js";import{SimpleColors as s}from"../../../simple-colors/simple-colors.js";import{localStorageSet as r}from"../../../utils/utils.js";import"../../../rpg-character/rpg-character.js";import{autorun as i}from"../../../../mobx/dist/mobx.esm.js";import{store as o}from"./AppHaxStore.js";import{AppHaxAPI as a}from"./AppHaxBackendAPI.js";export class AppHaxSiteLogin extends s{static get tag(){return"app-hax-site-login"}constructor(){super(),this.username="",this.password="",this.errorMSG="Enter User name",this.hidePassword=!0}static get properties(){return{...super.properties,username:{type:String},password:{type:String},errorMSG:{type:String},hidePassword:{type:Boolean}}}firstUpdated(){super.firstUpdated(),setTimeout((()=>{this.shadowRoot.querySelector("input").focus()}),0)}static get styles(){return[...super.styles,t`
        :host {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        #inputcontainer{
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
        }
        a{
            color: red;
        }

        // This does not work
        #errorText > p {
            visibility: hidden;
            background-color: lightblue;
            color: red;
            font-weight: bold;
        }
        rpg-character {
          display: block;
          margin: 10px;
        }
        .external {
          text-align: center;
        }
        `]}checkUsername(){const e=this.shadowRoot.querySelector("#username").value;this.hidePassword=!1,this.errorMSG="",this.username=e,setTimeout((()=>{this.shadowRoot.querySelector("input").focus()}),0)}async checkPassword(){const e=this.shadowRoot.querySelector("#password").value,t=await a.makeCall("login",{username:this.username,password:e});200!==t.status_code?(this.hidePassword=!0,this.errorMSG="Invalid Username or Password"):(r("jwt",t.jwt),i((()=>{o.user={name:this.username}})),o.jwt=t.jwt,this.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}})),o.toast(`Welcome ${this.username}! Let's build!`,5e3,{hat:"construction"}))}reset(){this.errorMSG="",this.username="",this.hidePassword=!0}nameChange(){this.username=this.shadowRoot.querySelector("#username").value}render(){return e`
        <rpg-character seed="${this.username}"></rpg-character> 
        <div id="inputcontainer">
            ${this.hidePassword?e`<input id="username" type="text" placeholder="abc123@psu.edu" @input="${this.nameChange}"/>  <button @click=${this.checkUsername}>next</button>`:e`<p> Hey ${this.username}! <a @click=${this.reset}>not you?</a></p><input id="password" type="text" placeholder="insert password here"/>   <button @click=${this.checkPassword}>Login</button>`}
            <div class="external">
              <slot name="externalproviders"></slot>
            </div>
        </div>
        <p id="errorText">${this.errorMSG}</p>
        `}}customElements.define(AppHaxSiteLogin.tag,AppHaxSiteLogin);